import numpy as np
import matplotlib.gridspec as gridspec
import matplotlib.pyplot as plt
from scipy.optimize import minimize
from scipy.special import erf


def gridcreate(name, y, x, ratio, z, **kwargs):
    # Function that creates a blank axis canvas; each figure gets a name (or alternatively a number
    # if none is given), and gridspec creates an N*M grid onto which you can create axes for plots.
    # This returns a gridspec "instance" so you can specific which figure to put the axis on if you
    # have several on the go.
    plt.figure(name, figsize=(z*x, z*ratio*y))
    gs = gridspec.GridSpec(y, x, **kwargs)
    return gs


def fit_min(p, x, dx, y, o):
    mu, c = p
    z = 0.5 * (erf(1/np.sqrt(2) * (x+dx - mu) / c) - erf(1/np.sqrt(2) * (x - mu) / c))
    f = np.sum((y - z)**2 / o**2)
    jac = np.empty(len(p), float)
    dzdmu = (np.exp(-0.5*(x - mu)**2/c**2) - np.exp(-0.5*(x+dx-mu)**2/c**2))/(np.sqrt(2*np.pi) * c)
    dzdc = ((x - mu)*np.exp(-0.5*(x - mu)**2/c**2) - (x+dx-mu)*np.exp(-0.5*(x+dx-mu)**2/c**2)) / \
           (np.sqrt(2*np.pi) * c**2)
    jac = np.array([np.sum(-2 * (y - z) / o**2 * i) for i in [dzdmu, dzdc]])
    return f, jac


xy = np.array([[18.566929133858267, 0.006837606837606924],
               [18.661417322834644, 0.008547008547008628],
               [18.77165354330709, 0.010256410256410442],
               [18.866141732283467, 0.013675213675213849],
               [18.960629921259844, 0.018803418803418848],
               [19.055118110236222, 0.02393162393162407],
               [19.1496062992126, 0.03589743589743599],
               [19.25984251968504, 0.04444444444444451],
               [19.35433070866142, 0.05641025641025654],
               [19.448818897637796, 0.07350427350427358],
               [19.543307086614174, 0.09914529914529924],
               [19.653543307086615, 0.1230769230769232],
               [19.763779527559056, 0.15384615384615397],
               [19.858267716535433, 0.20341880341880347],
               [19.95275590551181, 0.23418803418803424],
               [20.04724409448819, 0.2700854700854701],
               [20.141732283464567, 0.32478632478632485],
               [20.251968503937007, 0.3777777777777778],
               [20.346456692913385, 0.4102564102564103],
               [20.456692913385826, 0.46153846153846156],
               [20.551181102362207, 0.4871794871794872],
               [20.64566929133858, 0.5094017094017095],
               [20.755905511811022, 0.5264957264957265],
               [20.8503937007874, 0.541880341880342],
               [20.960629921259844, 0.5435897435897437],
               [21.039370078740156, 0.517948717948718],
               [21.1496062992126, 0.49401709401709404],
               [21.25984251968504, 0.47350427350427354],
               [21.35433070866142, 0.4444444444444445],
               [21.448818897637796, 0.4000000000000001],
               [21.543307086614174, 0.3675213675213676],
               [21.653543307086615, 0.3162393162393163],
               [21.748031496062993, 0.2683760683760684],
               [21.84251968503937, 0.22393162393162402],
               [21.95275590551181, 0.18290598290598303],
               [22.04724409448819, 0.14871794871794886],
               [22.141732283464567, 0.11623931623931638],
               [22.251968503937007, 0.09059829059829072],
               [22.346456692913385, 0.07692307692307698],
               [22.456692913385826, 0.05641025641025654],
               [22.551181102362207, 0.04957264957264973],
               [22.645669291338585, 0.0393162393162394],
               [22.755905511811022, 0.03076923076923077],
               [22.8503937007874, 0.02393162393162407],
               [22.944881889763778, 0.018803418803418848],
               [23.055118110236222, 0.011965811965812034],
               [23.1496062992126, 0.008547008547008628],
               [23.244094488188978, 0.006837606837606924]])

xy[:, 1] = xy[:, 1] / np.sum(xy[:, 1])
dx = np.mean(np.diff(xy[:, 0]))
res = minimize(fit_min, [21, 0.3], method='L-BFGS-B', jac=True, args=(xy[:, 0], dx, xy[:, 1],
               np.sqrt(xy[:, 1])))

gs = gridcreate('vnb', 1, 1, 0.8, 15)
ax = plt.subplot(gs[0])
ax.plot(np.append(xy[:, 0] - dx/2, xy[-1, 0]+dx/2), np.append(xy[:, 1], 0), 'k-',
    drawstyle='steps-post')
mu, c = res.x
x, y = xy[:, 0], xy[:, 1]
f = 0.5 * (erf(1/np.sqrt(2) * (x+dx - mu) / c) - erf(1/np.sqrt(2) * (x - mu) / c))
ax.plot(xy[:, 0], f, 'r-')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_title('$\mu$ = {:.2f}, $\sigma$ = {:.2f}'.format(mu, c))
plt.tight_layout()
plt.savefig('shen2003_mu.pdf')
print(res)
